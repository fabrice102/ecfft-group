//! Allow to read the parameters from files generated by get_params.sage

use ark_ff::PrimeField;

use crate::utils::isogeny::Isogeny;
use std::convert::TryInto;

/// Get the cosets from the `file_name` file.
/// This file can be generated by running `get_params.sage`.
///
/// Uses the closure `vec_to_field_element` to convert a vector of `NUM_LIMBS` `u64`
/// into a field element.
pub fn read_coset<F: PrimeField, const NUM_LIMBS: usize, ToF>(
    file_name: &str,
    vec_to_field_element: ToF,
) -> Vec<F>
where
    ToF: Fn(&[u64]) -> F,
{
    std::fs::read_to_string(file_name)
        .unwrap_or_else(|_| {
            panic!(
                "Run `get_params.sage` to generate the coset file {}.",
                file_name
            )
        })
        .split_whitespace()
        .map(|s| s.parse().unwrap())
        .collect::<Vec<u64>>()
        .chunks(NUM_LIMBS)
        .map(|chunk| vec_to_field_element(chunk))
        .collect()
}

/// Get the isogenies from the `file_name` file.
/// This file can be generated by running `get_params.sage`.
///
/// Uses the closure `vec_to_field_element` to convert a vector of `NUM_LIMBS` `u64`
/// into a field element.
pub fn read_isogenies<F: PrimeField, const NUM_LIMBS: usize, ToF>(
    file_name: &str,
    to_field_element: ToF,
) -> Vec<Isogeny<F>>
where
    ToF: Fn(&[u64]) -> F,
{
    std::fs::read_to_string(file_name)
        .unwrap_or_else(|_| {
            panic!(
                "Run `get_params.sage` to generate the coset file {}.",
                file_name
            )
        })
        .split_whitespace()
        .map(|s| s.parse().unwrap())
        .collect::<Vec<u64>>()
        .chunks(5 * NUM_LIMBS)
        .map(|chunk| {
            let numerator = (0..3)
                .map(|i| to_field_element(&chunk[i * NUM_LIMBS..(i + 1) * NUM_LIMBS]))
                .collect::<Vec<_>>()
                .try_into()
                .unwrap();
            let denominator = (3..5)
                .map(|i| to_field_element(&chunk[i * NUM_LIMBS..(i + 1) * NUM_LIMBS]))
                .collect::<Vec<_>>()
                .try_into()
                .unwrap();
            Isogeny {
                numerator,
                denominator,
            }
        })
        .collect()
}
